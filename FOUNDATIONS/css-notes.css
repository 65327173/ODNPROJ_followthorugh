/* css selectors  */
/* type selector
 will select and style all div elements */
div {

    color: blue;
}
/* class selector
  will select and style all elements of alert-text class*/

  .alert-text {

    color: red;
  }
/* id selector
  will select and style all elements of title id*/

  #title {

    color: black;
  }
/* an element can have many classes but only have 1 id, and an id cant be repeated on a single page. */

/*grouping selector
can group elements with stlyes they share */

.read, .unread {

    color: aliceblue;
    background-color: aqua;
}

.read{


}

.unread{


}

/* chaining selectors 
class selecting further*/
.subsection.header {

    color: aliceblue;
}
/* will select only element(s) with both subsection and header classes. 
can also be used with ids*/
.subsection#preview{

    color: aqua;
}
/* will select the element(s) with subsection class and preview id */
 
/* descendant combinators
selecting a nested class of selected class
*/
.ancestor .contents{

  color: beige;
}
/* will all content classes within ancestor class*/

/* "color" sets  elements text color, "background color" sets color to element
Font */
content {
  font-family: 'Courier New', Courier, monospace;/* list families in case primary family isnt supported by the browser*/
  font-size: 22px; /* size of font(px) */
  font-weight: 100;/* boldness of text. (700 equivalent to bold)*/
  text-align: center; /* orientation of text*/
  
}

/*cascade refers to the hiearchy of styling
ID > class > type */
.subsection {

  color: red;
}

.main .list {

  color: blue;
}
/* given class main >> class list + subsection
descendant combinator will take heiarchy over class selector */

#subsection {

  color: red;
}

.main .list {

  color: blue;
}

/* given class main >> class list + id subsection
ID selector will take priority over descendant combinator */

#subsection {

  color: red;
}

.main #subsection {

  color: blue;
}
/* the added class specificity will take priority over ID selector

(*, +, >,etc.) combinator symbols do not add specificty in and of themselves

Inheritance refers to styles inherited by elements descendants despite not being specified 

Rule Order, when an element has to conflicting styles with equal heiarchy, the last defined style is used*/

.subsection {

  color: red;
}

.main {

  color: blue;
}
/* when given element with subsection and main class, blue will be the text color */

/* BOX model 
every element is a box on the webpage
can use border stlye to view these boxes*/
.box{
  
  border: 2px solid red;
  border-style: dashed;
}
/* use padding, margin and border styles to manipulate the box of element */

.box{
  
  padding: 1px;/* space between the border of boxand the content of box */
  margin: 1px;/* space between the borders of box and borders of adjacent boxes */
  border: 1px;/* space between the margin and padding */
  height: 1px; /* height of element*/
  width: 1px; /* width of element*/
  box-sizing: border-box; /* sets height & width to box instead of being additive. see line 169*/
  inline-size: 100px; /* height or width of inline px, %, max-content, min-content, fit-content(em), auto
                          inherit, intial, revert, revert-layer, unset*/
  block-size: none; /* height or width of block etc. ^^^ */
  writing-mode: horizontal-tb; /* orientation of elements; horizontal (top bottom), vertical (left right}, vertical (right left),
  determines the direction of sizing for block and inline size styles above */ 
}

/*Outer display type
     block type:
       -will break onto new line
       -height and width respected
       -padding, margin, border will push away elements from box
       -h1, p
     inline type:
       -will not break onto new line
       -height and width will not apply
       -top/bottom padding, margins, borders will push away other inlines
       -a, span, em, strong
  Inner display type
    elements inside box arrange in normal flow
    display: flex converts children in box into flex items, will display in specifications to flexbox */
html {
  box-sizing: border-box;
}
/* sets webpage to alternative box model */
.box{
  box-sizing: inherit; /* styles only need to inherit */
}

.box {
/* can specify sizing even further */
  /* 1 line declaration */
  margin: 1px 1px 1px 1px;
  /*individual declaration */
  margin-top: auto;
  margin-bottom: auto; 
  margin-left: auto;
  margin-right: auto;
  /*a margin of different elements interact by collapsing in on each other,
    the highest value is the margin between them, not additive */
  
    margin: auto;/* default value is 0, or if space is left next to the element within the box,
              that value becomes the margin value(horizontal centering) */
  /* negative margins
  pulls elements towards instead of pushing */
  margin: -10px;
}

.box {
  /* specify styling and sizing of border further*/
  /* 1 line declaration */
  border-right: auto, dashed, aliceblue;
  /*individual declarations */
  border-right-color: aqua;
  border-right-style: dashed;
  border-right-width: auto;
}

.box {

  /* specify padding even further */
  padding-left: auto;
  padding-right: auto;
  padding-top: auto;
  padding-bottom: auto;
}

.box{

  display:inline-block
  /* width and height are respected
    padding, margin, border will push elements 
    >> will not break onto new line */
}
.box {
  display: block
  /* element will behave like a block */
}
.box {
  display: inline
  /* element will behave like a inline */
}

/*  The "Normal Flow" refers to order elements are placed inside the the browser viewport
    block level elements are placed in "block flow direction" > writing mode: horizontal tb */

  /* FLEXBOX 
  arrangment of items into rows and columns*/

  .flex-container {

    display:flex; /* declares item as flex-item */
    display:flexbox; /* declares item as flex-box */
    flex:auto auto auto; /* manipulates size by growth factor, shorthand notation (flex-grow  flex-shrink  flex-basis)
    flex value notations: */
    flex: 0 1 auto; /* flex inital; use intial width/height, make the item inflexible to free space, but allows it to shrink to minimum size*/
    flex: 1 1 auto; /* flex auto; use intial width/height, flexible to free space,  */
    flex: 0 0 auto; /* flex none; use intial width/height, fully inflexible,  */ 
    flex: 1 1 0; /* flex +# sizes proportioned to the flex factor*/
  }

  .flex-container {

    flex-direction: column; /* orients container in columns instead of the default rows */
    justify-content: space-between; /* aligns items along main axis(being flex-direction)*/
    align-items: center;/* aligns items vertically*/
    gap: 1px;/* adds space between flex items 
    "primary axis" refers to items bunched at start of the container,
    "cross axis" refers to itmes stretched out to fill the entire container*/
  
  }

